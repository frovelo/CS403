;;  Author: Francisco Rovelo
;;  Class: CS403(ProgLang), Dr. John Lusth | Fall, 2017
;;  Date: Last Updated-> Oct 13th, 2017

; (define (main)
; 	(setPort (open (getElement ScamArgs 1) 'read))
; 	(println (if2cond (readExpr)))
; 	(println (cond2if (readExpr)))
; )

; (define (cond2if lis)
; 	(define (flatten items)
; 		(cond
; 			((null? items) nil) 
; 			((atom? (car items)) (cons (car items) (flatten (cdr items))))
; 			(else
; 				(append (car items) (flatten (cdr items)))
; 			)
; 		)
; 	)
; 	(cond
; 		((equal? (cadddr (flatten lis)) 'else)
; 		(append (append (append '(if) (list (cadr (flatten lis)))) (list (caddr (flatten lis)))) (list (caddddr (flatten lis)))))
; 		(else
; 			(append (append (append '(if) (list (cadr (flatten lis)))) (list (caddr (flatten lis)))) (list (cond2if (append '(cond) (cddr lis))))))
; 	)
; )

; (define (if2cond i2c)
; 	(define (help lis)
; 		(cond
; 			((and (list? (cadddr lis)) (equal? (car (cadddr lis)) 'if)) (append (list (list (cadr lis) (caddr lis))) (help (cadddr lis))))
; 			(else
; 				(append (list (list (cadr lis) (caddr lis))) (list (list 'else (cadddr lis))))
; 			)
; 		)
; 	)
; 	(append '(cond) (help i2c))
; )

(define (main)
	(setPort (open (getElement ScamArgs 1) 'read))
	(define goCond (readExpr))
	(define goIf (readExpr))
	(println (apply if2cond (list goCond)))
	(println (apply cond2if (list goIf)))
)

(define (if2cond ifList)
	(define conderrrrr 'cond)
	(define elserrrrrrrr 'else)
	(cond
		((and (list? (cadr ifList)) (equal? (car (cadr ifList)) 'if) (list? (caddr ifList)) (equal? (car (caddr ifList)) 'if) (list? (cadddr ifList)) (equal? (car (cadddr ifList)) 'if)) 
			(append (cons conderrrrr (list (append (list (if2cond (cadr ifList))) (list (if2cond (caddr ifList)))))) (list (append (list elserrrrrrrr) (list (if2cond (cadddr ifList))))))
		)
		((and (list? (cadr ifList)) (equal? (car (cadr ifList)) 'if) (list? (caddr ifList)) (equal? (car (caddr ifList)) 'if) (or (and (list? (cadddr ifList)) (not (equal? (car (cadddr ifList)) 'if))) (not (list? (cadddr ifList))))) 
			(append (cons conderrrrr (list (append (list (if2cond (cadr ifList))) (list (if2cond (caddr ifList)))))) (list (append (list elserrrrrrrr) (list (cadddr ifList)))))
		)
		((and (list? (cadr ifList)) (equal? (car (cadr ifList)) 'if) (or (and (list? (caddr ifList)) (not (equal? (car (caddr ifList)) 'if))) (not (list? (caddr ifList)))) (list? (cadddr ifList)) (equal? (car (cadddr ifList)) 'if))  
			(append (cons conderrrrr (list (append (list (if2cond (cadr ifList))) (list (caddr ifList))))) (list (append (list elserrrrrrrr) (list (if2cond (cadddr ifList))))))
		)
		((and (list? (cadr ifList)) (not (equal? (car (cadr ifList)) 'if)) (list? (caddr ifList)) (equal? (car (caddr ifList)) 'if) (list? (cadddr ifList)) (equal? (car (cadddr ifList)) 'if)) 
			(append (cons conderrrrr (list (append (list (cadr ifList)) (list (if2cond (caddr ifList)))))) (list (append (list elserrrrrrrr) (list (if2cond (cadddr ifList))))))
		)
		((and (list? (cadr ifList)) (equal? (car (cadr ifList)) 'if) (or (and (list? (caddr ifList)) (not (equal? (car (caddr ifList)) 'if))) (not (list? (caddr ifList)))) (or (and (list? (cadddr ifList)) (not (equal? (car (cadddr ifList)) 'if))) (not (list? (cadddr ifList))))) 
			(append (cons conderrrrr (list (append (list (if2cond (cadr ifList))) (list (caddr ifList))))) (list (append (list elserrrrrrrr) (list (cadddr ifList)))))
		)
		((and (list? (caddr ifList)) (equal? (car (caddr ifList)) 'if) (or (and (list? (cadddr ifList)) (not (equal? (car (cadddr ifList)) 'if))) (not (list? (cadddr ifList))))) 
			(append (cons conderrrrr (list (append (list (cadr ifList)) (list (if2cond (caddr ifList)))))) (list (append (list elserrrrrrrr) (list (cadddr ifList)))))
		)
		((and (or (and (list? (caddr ifList)) (not (equal? (car (caddr ifList)) 'if))) (not (list? (caddr ifList)))) (list? (cadddr ifList)) (equal? (car (cadddr ifList)) 'if)) 
			(append (cons conderrrrr (list (append (list (cadr ifList)) (list (caddr ifList))))) (list (append (list elserrrrrrrr) (list (if2cond (cadddr ifList))))))
		)
		(else 
			(append (cons conderrrrr (list (append (list (cadr ifList)) (list (caddr ifList))))) (list (append (list elserrrrrrrr) (list (cadddr ifList)))))
		)
	)
)

(define (cond2if condList)
	(define (c2if-iterhelper afterFirstCond)
		(define iferrrrrrrr 'if)
		(cond
			((equal? (car (car afterFirstCond)) 'else) 
				(if (and (list? (cadr (car afterFirstCond))) (equal? (car (cadr (car afterFirstCond))) 'cond)) 
					(c2if-iterhelper (cdr (cadr (car afterFirstCond)))) 
					(cadr (car afterFirstCond))
				)
			)
			((and (list? (car (car afterFirstCond))) (equal? (car (car (car afterFirstCond))) 'cond) (list? (cadr (car afterFirstCond))) (equal? (car (cadr (car afterFirstCond))) 'cond)) 
				(append (cons iferrrrrrrr (append (cons iferrrrrrrr (list (c2if-iterhelper (cdr (car (car afterFirstCond)))))) (cons iferrrrrrrr (list (c2if-iterhelper (cdr (cadr (car afterFirstCond)))))))))
			)
			((and (list? (car (car afterFirstCond))) (equal? (car (car (car afterFirstCond))) 'cond) (or (not (list? (cadr (car afterFirstCond)))) (and (list? (cadr (car afterFirstCond))) (not (equal? (car (cadr (car afterFirstCond))) 'cond))))) 
				(append (append (cons iferrrrrrrr (list (c2if-iterhelper (cdr (car (car afterFirstCond)))))) (cdr (car afterFirstCond))) (list (c2if-iterhelper (cdr afterFirstCond))))
			)
			((and (or (and (list? (car (car afterFirstCond))) (not (equal? (car (car (car afterFirstCond))) 'cond))) (not (list? (car (car afterFirstCond))))) (list? (cadr (car afterFirstCond))) (equal? (car (cadr (car afterFirstCond))) 'cond)) 
				(append (append (cons iferrrrrrrr (list (car (car afterFirstCond)))) (list (c2if-iterhelper (cdr (cadr (car afterFirstCond)))))) (list (c2if-iterhelper (cdr afterFirstCond))))
			)
			((and (or (not (list? (car (car afterFirstCond)))) (and (list? (car (car afterFirstCond))) (not (equal? (car (car (car afterFirstCond))) 'cond)))) (or (and (list? (cadr (car afterFirstCond))) (not (equal? (car (cadr (car afterFirstCond))) 'cond))) (not (list? (cadr (car afterFirstCond)))))) 
				(append (append (cons iferrrrrrrr (list (car (car afterFirstCond)))) (cdr (car afterFirstCond))) (list (c2if-iterhelper (cdr afterFirstCond))))
			)
		)
	)
	(c2if-iterhelper (cdr condList))
)
